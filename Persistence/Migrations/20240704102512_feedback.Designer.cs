// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Contexts;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(HRSDbContext))]
    [Migration("20240704102512_feedback")]
    partial class feedback
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AllergyPatient", b =>
                {
                    b.Property<int>("AllergiesId")
                        .HasColumnType("int");

                    b.Property<int>("PatientsId")
                        .HasColumnType("int");

                    b.HasKey("AllergiesId", "PatientsId");

                    b.HasIndex("PatientsId");

                    b.ToTable("AllergyPatient");
                });

            modelBuilder.Entity("Domain.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 7, 4, 13, 25, 11, 427, DateTimeKind.Local).AddTicks(4983)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Allergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Allergies");
                });

            modelBuilder.Entity("Domain.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("isCancelStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Domain.Entities.Block", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("No")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Blocks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            No = "A"
                        },
                        new
                        {
                            Id = 2,
                            No = "B"
                        },
                        new
                        {
                            Id = 3,
                            No = "C"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Clinic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentDuration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Clinics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentDuration = 30,
                            Name = "Yoğun Bakım"
                        },
                        new
                        {
                            Id = 2,
                            AppointmentDuration = 20,
                            Name = "Palyatif Bakım"
                        },
                        new
                        {
                            Id = 3,
                            AppointmentDuration = 20,
                            Name = "Beyin ve Sinir Cerrahisi"
                        },
                        new
                        {
                            Id = 4,
                            AppointmentDuration = 15,
                            Name = "Çocuk Sağlığı ve Hastalıkları"
                        },
                        new
                        {
                            Id = 5,
                            AppointmentDuration = 15,
                            Name = "Enfeksiyon Hastalıkları"
                        },
                        new
                        {
                            Id = 6,
                            AppointmentDuration = 15,
                            Name = "Fiziksel Tıp ve Rehabilitasyon"
                        },
                        new
                        {
                            Id = 7,
                            AppointmentDuration = 30,
                            Name = "Genel Cerrahi"
                        },
                        new
                        {
                            Id = 8,
                            AppointmentDuration = 20,
                            Name = "Genel Dahiliye"
                        },
                        new
                        {
                            Id = 9,
                            AppointmentDuration = 30,
                            Name = "Göğüs Cerrahi"
                        },
                        new
                        {
                            Id = 10,
                            AppointmentDuration = 30,
                            Name = "Göğüs Hastalıkları"
                        },
                        new
                        {
                            Id = 11,
                            AppointmentDuration = 20,
                            Name = "Göz Hastalıkları"
                        },
                        new
                        {
                            Id = 12,
                            AppointmentDuration = 30,
                            Name = "Kadın Hastalıkları ve Doğum"
                        },
                        new
                        {
                            Id = 13,
                            AppointmentDuration = 20,
                            Name = "Kalp Damar Cerrahisi"
                        },
                        new
                        {
                            Id = 14,
                            AppointmentDuration = 20,
                            Name = "Kardiyoloji"
                        },
                        new
                        {
                            Id = 15,
                            AppointmentDuration = 15,
                            Name = "Kulak Burun Boğaz"
                        },
                        new
                        {
                            Id = 16,
                            AppointmentDuration = 20,
                            Name = "Nöroloji"
                        },
                        new
                        {
                            Id = 17,
                            AppointmentDuration = 15,
                            Name = "Ortopedi ve Travmatoloji"
                        },
                        new
                        {
                            Id = 18,
                            AppointmentDuration = 15,
                            Name = "Üroloji"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("ClinicId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OfficeLocationId")
                        .HasColumnType("int");

                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("OfficeLocationId")
                        .IsUnique();

                    b.HasIndex("TitleId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            ClinicId = 17,
                            CreatedDate = new DateTime(2024, 7, 4, 13, 25, 11, 427, DateTimeKind.Local).AddTicks(4989),
                            OfficeLocationId = 1,
                            TitleId = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.DoctorNoWorkHour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("NoWorkHourId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("NoWorkHourId");

                    b.ToTable("DoctorNoWorkHour");
                });

            modelBuilder.Entity("Domain.Entities.FAQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("FAQs");
                });

            modelBuilder.Entity("Domain.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserFeedback")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Domain.Entities.Floor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("No")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Floors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            No = "Zemin"
                        },
                        new
                        {
                            Id = 2,
                            No = "1.Kat"
                        },
                        new
                        {
                            Id = 3,
                            No = "2.Kat"
                        },
                        new
                        {
                            Id = 4,
                            No = "3.Kat"
                        },
                        new
                        {
                            Id = 5,
                            No = "4.Kat"
                        },
                        new
                        {
                            Id = 6,
                            No = "-1.Kat"
                        });
                });

            modelBuilder.Entity("Domain.Entities.NoWorkHour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("NoWorkHours");
                });

            modelBuilder.Entity("Domain.Entities.OfficeLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BlockId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FloorId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BlockId");

                    b.HasIndex("FloorId");

                    b.HasIndex("RoomId");

                    b.ToTable("OfficeLocations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BlockId = 1,
                            FloorId = 1,
                            RoomId = 1
                        },
                        new
                        {
                            Id = 2,
                            BlockId = 1,
                            FloorId = 1,
                            RoomId = 2
                        },
                        new
                        {
                            Id = 3,
                            BlockId = 1,
                            FloorId = 2,
                            RoomId = 3
                        },
                        new
                        {
                            Id = 4,
                            BlockId = 1,
                            FloorId = 2,
                            RoomId = 4
                        },
                        new
                        {
                            Id = 5,
                            BlockId = 1,
                            FloorId = 2,
                            RoomId = 5
                        },
                        new
                        {
                            Id = 6,
                            BlockId = 2,
                            FloorId = 1,
                            RoomId = 6
                        },
                        new
                        {
                            Id = 7,
                            BlockId = 2,
                            FloorId = 1,
                            RoomId = 7
                        },
                        new
                        {
                            Id = 8,
                            BlockId = 3,
                            FloorId = 1,
                            RoomId = 10
                        },
                        new
                        {
                            Id = 9,
                            BlockId = 3,
                            FloorId = 1,
                            RoomId = 11
                        });
                });

            modelBuilder.Entity("Domain.Entities.OldAppointmentDuration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClinicId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.ToTable("AppointmentDurationHistory");
                });

            modelBuilder.Entity("Domain.Entities.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Patient"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Doctor"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Support"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Domain.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("No")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            No = "O-1"
                        },
                        new
                        {
                            Id = 2,
                            No = "O-2"
                        },
                        new
                        {
                            Id = 3,
                            No = "K-1"
                        },
                        new
                        {
                            Id = 4,
                            No = "K-2"
                        },
                        new
                        {
                            Id = 5,
                            No = "K-3"
                        },
                        new
                        {
                            Id = 6,
                            No = "D-1"
                        },
                        new
                        {
                            Id = 7,
                            No = "D-2"
                        },
                        new
                        {
                            Id = 8,
                            No = "N-1"
                        },
                        new
                        {
                            Id = 9,
                            No = "N-2"
                        },
                        new
                        {
                            Id = 10,
                            No = "U-1"
                        },
                        new
                        {
                            Id = 11,
                            No = "U-2"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Title", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TitleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Titles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TitleName = "Pratisyen Doktor"
                        },
                        new
                        {
                            Id = 2,
                            TitleName = "Uzman Doktor"
                        },
                        new
                        {
                            Id = 3,
                            TitleName = "Operatör Doktor"
                        },
                        new
                        {
                            Id = 4,
                            TitleName = "Yardımcı Doçent"
                        },
                        new
                        {
                            Id = 5,
                            TitleName = "Doçent"
                        },
                        new
                        {
                            Id = 6,
                            TitleName = "Profesör"
                        },
                        new
                        {
                            Id = 7,
                            TitleName = "Ordinaryüs "
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.UserOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OperationClaimId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            OperationClaimId = 4,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            OperationClaimId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            OperationClaimId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            OperationClaimId = 1,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("Domain.Entities.WorkingTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EndBreakTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("StartBreakTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("WorkingTimes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndBreakTime = new TimeSpan(0, 13, 0, 0, 0),
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            StartBreakTime = new TimeSpan(0, 12, 0, 0, 0),
                            StartTime = new TimeSpan(0, 8, 30, 0, 0)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.Property<int?>("BloodType")
                        .HasColumnType("int");

                    b.Property<string>("EmergencyContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FeedbackId")
                        .HasColumnType("int");

                    b.HasIndex("FeedbackId");

                    b.ToTable("Patients", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(2024, 7, 4, 13, 25, 11, 427, DateTimeKind.Local).AddTicks(4949),
                            CreatedDate = new DateTime(2024, 7, 4, 13, 25, 11, 427, DateTimeKind.Local).AddTicks(4976),
                            Email = "admin@hrs.com",
                            FirstName = "Test",
                            Gender = "U",
                            LastName = "Admin",
                            PasswordHash = new byte[] { 21, 2, 89, 186, 54, 33, 33, 212, 103, 54, 251, 91, 123, 64, 126, 42, 1, 61, 194, 224, 121, 129, 22, 64, 110, 113, 204, 21, 105, 11, 103, 74, 7, 162, 54, 40, 69, 55, 166, 124, 33, 110, 58, 1, 30, 176, 217, 178, 116, 223, 73, 67, 119, 165, 234, 121, 153, 205, 129, 12, 52, 68, 201, 253 },
                            PasswordSalt = new byte[] { 57, 49, 82, 54, 135, 151, 46, 104, 112, 134, 91, 109, 201, 3, 101, 210, 79, 217, 156, 90, 84, 157, 53, 177, 41, 159, 210, 124, 184, 70, 248, 128, 242, 158, 244, 17, 66, 28, 215, 16, 67, 191, 241, 202, 226, 158, 91, 207, 66, 255, 239, 245, 38, 55, 31, 208, 198, 247, 37, 2, 1, 146, 133, 203, 121, 34, 121, 61, 148, 169, 157, 83, 226, 236, 61, 101, 206, 79, 187, 129, 184, 253, 246, 48, 102, 211, 59, 218, 138, 211, 123, 60, 164, 38, 91, 121, 69, 184, 138, 8, 4, 194, 131, 197, 62, 179, 127, 253, 217, 68, 84, 154, 247, 62, 182, 122, 63, 138, 45, 127, 42, 229, 207, 231, 156, 237, 232, 112 },
                            Phone = "+905000000000"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(2024, 7, 4, 13, 25, 11, 427, DateTimeKind.Local).AddTicks(4984),
                            CreatedDate = new DateTime(2024, 7, 4, 13, 25, 11, 427, DateTimeKind.Local).AddTicks(4985),
                            Email = "doctor@hrs.com",
                            FirstName = "Test",
                            Gender = "U",
                            LastName = "Doctor",
                            PasswordHash = new byte[] { 21, 2, 89, 186, 54, 33, 33, 212, 103, 54, 251, 91, 123, 64, 126, 42, 1, 61, 194, 224, 121, 129, 22, 64, 110, 113, 204, 21, 105, 11, 103, 74, 7, 162, 54, 40, 69, 55, 166, 124, 33, 110, 58, 1, 30, 176, 217, 178, 116, 223, 73, 67, 119, 165, 234, 121, 153, 205, 129, 12, 52, 68, 201, 253 },
                            PasswordSalt = new byte[] { 57, 49, 82, 54, 135, 151, 46, 104, 112, 134, 91, 109, 201, 3, 101, 210, 79, 217, 156, 90, 84, 157, 53, 177, 41, 159, 210, 124, 184, 70, 248, 128, 242, 158, 244, 17, 66, 28, 215, 16, 67, 191, 241, 202, 226, 158, 91, 207, 66, 255, 239, 245, 38, 55, 31, 208, 198, 247, 37, 2, 1, 146, 133, 203, 121, 34, 121, 61, 148, 169, 157, 83, 226, 236, 61, 101, 206, 79, 187, 129, 184, 253, 246, 48, 102, 211, 59, 218, 138, 211, 123, 60, 164, 38, 91, 121, 69, 184, 138, 8, 4, 194, 131, 197, 62, 179, 127, 253, 217, 68, 84, 154, 247, 62, 182, 122, 63, 138, 45, 127, 42, 229, 207, 231, 156, 237, 232, 112 },
                            Phone = "+905000000001"
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(2024, 7, 4, 13, 25, 11, 427, DateTimeKind.Local).AddTicks(4990),
                            CreatedDate = new DateTime(2024, 7, 4, 13, 25, 11, 427, DateTimeKind.Local).AddTicks(4991),
                            Email = "patient@hrs.com",
                            FirstName = "Test",
                            Gender = "U",
                            LastName = "Patient",
                            PasswordHash = new byte[] { 21, 2, 89, 186, 54, 33, 33, 212, 103, 54, 251, 91, 123, 64, 126, 42, 1, 61, 194, 224, 121, 129, 22, 64, 110, 113, 204, 21, 105, 11, 103, 74, 7, 162, 54, 40, 69, 55, 166, 124, 33, 110, 58, 1, 30, 176, 217, 178, 116, 223, 73, 67, 119, 165, 234, 121, 153, 205, 129, 12, 52, 68, 201, 253 },
                            PasswordSalt = new byte[] { 57, 49, 82, 54, 135, 151, 46, 104, 112, 134, 91, 109, 201, 3, 101, 210, 79, 217, 156, 90, 84, 157, 53, 177, 41, 159, 210, 124, 184, 70, 248, 128, 242, 158, 244, 17, 66, 28, 215, 16, 67, 191, 241, 202, 226, 158, 91, 207, 66, 255, 239, 245, 38, 55, 31, 208, 198, 247, 37, 2, 1, 146, 133, 203, 121, 34, 121, 61, 148, 169, 157, 83, 226, 236, 61, 101, 206, 79, 187, 129, 184, 253, 246, 48, 102, 211, 59, 218, 138, 211, 123, 60, 164, 38, 91, 121, 69, 184, 138, 8, 4, 194, 131, 197, 62, 179, 127, 253, 217, 68, 84, 154, 247, 62, 182, 122, 63, 138, 45, 127, 42, 229, 207, 231, 156, 237, 232, 112 },
                            Phone = "+905000000002"
                        });
                });

            modelBuilder.Entity("AllergyPatient", b =>
                {
                    b.HasOne("Domain.Entities.Allergy", null)
                        .WithMany()
                        .HasForeignKey("AllergiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Admin", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Appointment", b =>
                {
                    b.HasOne("Domain.Entities.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.HasOne("Domain.Entities.Clinic", "Clinic")
                        .WithMany("Doctors")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.OfficeLocation", "OfficeLocation")
                        .WithOne("Doctor")
                        .HasForeignKey("Domain.Entities.Doctor", "OfficeLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Title", "Title")
                        .WithMany("Doctors")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("OfficeLocation");

                    b.Navigation("Title");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.DoctorNoWorkHour", b =>
                {
                    b.HasOne("Domain.Entities.Doctor", "Doctor")
                        .WithMany("DoctorNoWorkHours")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.NoWorkHour", "NoWorkHour")
                        .WithMany("DoctorNoWorkHours")
                        .HasForeignKey("NoWorkHourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("NoWorkHour");
                });

            modelBuilder.Entity("Domain.Entities.OfficeLocation", b =>
                {
                    b.HasOne("Domain.Entities.Block", "Block")
                        .WithMany("OfficeLocations")
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Floor", "Floor")
                        .WithMany("OfficeLocations")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Room", "Room")
                        .WithMany("OfficeLocations")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Floor");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Domain.Entities.OldAppointmentDuration", b =>
                {
                    b.HasOne("Domain.Entities.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("Domain.Entities.Report", b =>
                {
                    b.HasOne("Domain.Entities.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Domain.Entities.UserOperationClaim", b =>
                {
                    b.HasOne("Domain.Entities.OperationClaim", "OperationClaim")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.HasOne("Domain.Entities.Feedback", null)
                        .WithMany("Patients")
                        .HasForeignKey("FeedbackId");

                    b.HasOne("Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Patient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Block", b =>
                {
                    b.Navigation("OfficeLocations");
                });

            modelBuilder.Entity("Domain.Entities.Clinic", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("DoctorNoWorkHours");
                });

            modelBuilder.Entity("Domain.Entities.Feedback", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("Domain.Entities.Floor", b =>
                {
                    b.Navigation("OfficeLocations");
                });

            modelBuilder.Entity("Domain.Entities.NoWorkHour", b =>
                {
                    b.Navigation("DoctorNoWorkHours");
                });

            modelBuilder.Entity("Domain.Entities.OfficeLocation", b =>
                {
                    b.Navigation("Doctor")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.OperationClaim", b =>
                {
                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.Room", b =>
                {
                    b.Navigation("OfficeLocations");
                });

            modelBuilder.Entity("Domain.Entities.Title", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
