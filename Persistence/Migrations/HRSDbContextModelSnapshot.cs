// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Contexts;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(HRSDbContext))]
    partial class HRSDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AllergyPatient", b =>
                {
                    b.Property<int>("AllergiesId")
                        .HasColumnType("int");

                    b.Property<int>("PatientsId")
                        .HasColumnType("int");

                    b.HasKey("AllergiesId", "PatientsId");

                    b.HasIndex("PatientsId");

                    b.ToTable("AllergyPatient");
                });

            modelBuilder.Entity("Domain.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 7, 5, 14, 2, 41, 108, DateTimeKind.Local).AddTicks(5527)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Allergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Allergies");
                });

            modelBuilder.Entity("Domain.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("isCancelStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Domain.Entities.Block", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("No")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Blocks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            No = "A"
                        },
                        new
                        {
                            Id = 2,
                            No = "B"
                        },
                        new
                        {
                            Id = 3,
                            No = "C"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Clinic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentDuration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Clinics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentDuration = 30,
                            Name = "Yoğun Bakım"
                        },
                        new
                        {
                            Id = 2,
                            AppointmentDuration = 20,
                            Name = "Palyatif Bakım"
                        },
                        new
                        {
                            Id = 3,
                            AppointmentDuration = 20,
                            Name = "Beyin ve Sinir Cerrahisi"
                        },
                        new
                        {
                            Id = 4,
                            AppointmentDuration = 15,
                            Name = "Çocuk Sağlığı ve Hastalıkları"
                        },
                        new
                        {
                            Id = 5,
                            AppointmentDuration = 15,
                            Name = "Enfeksiyon Hastalıkları"
                        },
                        new
                        {
                            Id = 6,
                            AppointmentDuration = 15,
                            Name = "Fiziksel Tıp ve Rehabilitasyon"
                        },
                        new
                        {
                            Id = 7,
                            AppointmentDuration = 30,
                            Name = "Genel Cerrahi"
                        },
                        new
                        {
                            Id = 8,
                            AppointmentDuration = 20,
                            Name = "Genel Dahiliye"
                        },
                        new
                        {
                            Id = 9,
                            AppointmentDuration = 30,
                            Name = "Göğüs Cerrahi"
                        },
                        new
                        {
                            Id = 10,
                            AppointmentDuration = 30,
                            Name = "Göğüs Hastalıkları"
                        },
                        new
                        {
                            Id = 11,
                            AppointmentDuration = 20,
                            Name = "Göz Hastalıkları"
                        },
                        new
                        {
                            Id = 12,
                            AppointmentDuration = 30,
                            Name = "Kadın Hastalıkları ve Doğum"
                        },
                        new
                        {
                            Id = 13,
                            AppointmentDuration = 20,
                            Name = "Kalp Damar Cerrahisi"
                        },
                        new
                        {
                            Id = 14,
                            AppointmentDuration = 20,
                            Name = "Kardiyoloji"
                        },
                        new
                        {
                            Id = 15,
                            AppointmentDuration = 15,
                            Name = "Kulak Burun Boğaz"
                        },
                        new
                        {
                            Id = 16,
                            AppointmentDuration = 20,
                            Name = "Nöroloji"
                        },
                        new
                        {
                            Id = 17,
                            AppointmentDuration = 15,
                            Name = "Ortopedi ve Travmatoloji"
                        },
                        new
                        {
                            Id = 18,
                            AppointmentDuration = 15,
                            Name = "Üroloji"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("ClinicId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OfficeLocationId")
                        .HasColumnType("int");

                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("OfficeLocationId")
                        .IsUnique();

                    b.HasIndex("TitleId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            ClinicId = 17,
                            CreatedDate = new DateTime(2024, 7, 5, 14, 2, 41, 108, DateTimeKind.Local).AddTicks(5536),
                            OfficeLocationId = 1,
                            TitleId = 1
                        },
                        new
                        {
                            Id = 4,
                            ClinicId = 1,
                            CreatedDate = new DateTime(2024, 7, 5, 14, 2, 41, 108, DateTimeKind.Local).AddTicks(5572),
                            OfficeLocationId = 2,
                            TitleId = 2
                        },
                        new
                        {
                            Id = 5,
                            ClinicId = 3,
                            CreatedDate = new DateTime(2024, 7, 5, 14, 2, 41, 108, DateTimeKind.Local).AddTicks(5574),
                            OfficeLocationId = 3,
                            TitleId = 3
                        },
                        new
                        {
                            Id = 6,
                            ClinicId = 5,
                            CreatedDate = new DateTime(2024, 7, 5, 14, 2, 41, 108, DateTimeKind.Local).AddTicks(5576),
                            OfficeLocationId = 4,
                            TitleId = 4
                        },
                        new
                        {
                            Id = 7,
                            ClinicId = 7,
                            CreatedDate = new DateTime(2024, 7, 5, 14, 2, 41, 108, DateTimeKind.Local).AddTicks(5578),
                            OfficeLocationId = 5,
                            TitleId = 5
                        },
                        new
                        {
                            Id = 8,
                            ClinicId = 9,
                            CreatedDate = new DateTime(2024, 7, 5, 14, 2, 41, 108, DateTimeKind.Local).AddTicks(5580),
                            OfficeLocationId = 6,
                            TitleId = 6
                        },
                        new
                        {
                            Id = 14,
                            ClinicId = 3,
                            CreatedDate = new DateTime(2024, 7, 5, 14, 2, 41, 108, DateTimeKind.Local).AddTicks(5582),
                            OfficeLocationId = 7,
                            TitleId = 2
                        },
                        new
                        {
                            Id = 15,
                            ClinicId = 3,
                            CreatedDate = new DateTime(2024, 7, 5, 14, 2, 41, 108, DateTimeKind.Local).AddTicks(5583),
                            OfficeLocationId = 8,
                            TitleId = 3
                        },
                        new
                        {
                            Id = 16,
                            ClinicId = 3,
                            CreatedDate = new DateTime(2024, 7, 5, 14, 2, 41, 108, DateTimeKind.Local).AddTicks(5585),
                            OfficeLocationId = 9,
                            TitleId = 4
                        });
                });

            modelBuilder.Entity("Domain.Entities.DoctorNoWorkHour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("NoWorkHourId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("NoWorkHourId");

                    b.ToTable("DoctorNoWorkHour");
                });

            modelBuilder.Entity("Domain.Entities.FAQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("FAQs");
                });

            modelBuilder.Entity("Domain.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserFeedback")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Domain.Entities.Floor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("No")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Floors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            No = "Zemin"
                        },
                        new
                        {
                            Id = 2,
                            No = "1.Kat"
                        },
                        new
                        {
                            Id = 3,
                            No = "2.Kat"
                        },
                        new
                        {
                            Id = 4,
                            No = "3.Kat"
                        },
                        new
                        {
                            Id = 5,
                            No = "4.Kat"
                        },
                        new
                        {
                            Id = 6,
                            No = "-1.Kat"
                        });
                });

            modelBuilder.Entity("Domain.Entities.NoWorkHour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("NoWorkHours");
                });

            modelBuilder.Entity("Domain.Entities.OfficeLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BlockId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FloorId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BlockId");

                    b.HasIndex("FloorId");

                    b.HasIndex("RoomId");

                    b.ToTable("OfficeLocations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BlockId = 1,
                            FloorId = 1,
                            RoomId = 1
                        },
                        new
                        {
                            Id = 2,
                            BlockId = 1,
                            FloorId = 1,
                            RoomId = 2
                        },
                        new
                        {
                            Id = 3,
                            BlockId = 1,
                            FloorId = 2,
                            RoomId = 3
                        },
                        new
                        {
                            Id = 4,
                            BlockId = 1,
                            FloorId = 2,
                            RoomId = 4
                        },
                        new
                        {
                            Id = 5,
                            BlockId = 1,
                            FloorId = 2,
                            RoomId = 5
                        },
                        new
                        {
                            Id = 6,
                            BlockId = 2,
                            FloorId = 1,
                            RoomId = 6
                        },
                        new
                        {
                            Id = 7,
                            BlockId = 2,
                            FloorId = 1,
                            RoomId = 7
                        },
                        new
                        {
                            Id = 8,
                            BlockId = 3,
                            FloorId = 1,
                            RoomId = 10
                        },
                        new
                        {
                            Id = 9,
                            BlockId = 3,
                            FloorId = 1,
                            RoomId = 11
                        });
                });

            modelBuilder.Entity("Domain.Entities.OldAppointmentDuration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClinicId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.ToTable("AppointmentDurationHistory");
                });

            modelBuilder.Entity("Domain.Entities.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Patient"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Doctor"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Support"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Domain.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("No")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            No = "O-1"
                        },
                        new
                        {
                            Id = 2,
                            No = "O-2"
                        },
                        new
                        {
                            Id = 3,
                            No = "K-1"
                        },
                        new
                        {
                            Id = 4,
                            No = "K-2"
                        },
                        new
                        {
                            Id = 5,
                            No = "K-3"
                        },
                        new
                        {
                            Id = 6,
                            No = "D-1"
                        },
                        new
                        {
                            Id = 7,
                            No = "D-2"
                        },
                        new
                        {
                            Id = 8,
                            No = "N-1"
                        },
                        new
                        {
                            Id = 9,
                            No = "N-2"
                        },
                        new
                        {
                            Id = 10,
                            No = "U-1"
                        },
                        new
                        {
                            Id = 11,
                            No = "U-2"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Title", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TitleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Titles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TitleName = "Pratisyen Doktor"
                        },
                        new
                        {
                            Id = 2,
                            TitleName = "Uzman Doktor"
                        },
                        new
                        {
                            Id = 3,
                            TitleName = "Operatör Doktor"
                        },
                        new
                        {
                            Id = 4,
                            TitleName = "Yardımcı Doçent"
                        },
                        new
                        {
                            Id = 5,
                            TitleName = "Doçent"
                        },
                        new
                        {
                            Id = 6,
                            TitleName = "Profesör"
                        },
                        new
                        {
                            Id = 7,
                            TitleName = "Ordinaryüs "
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.UserOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OperationClaimId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            OperationClaimId = 4,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            OperationClaimId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            OperationClaimId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            OperationClaimId = 1,
                            UserId = 3
                        },
                        new
                        {
                            Id = 6,
                            OperationClaimId = 1,
                            UserId = 4
                        },
                        new
                        {
                            Id = 7,
                            OperationClaimId = 2,
                            UserId = 4
                        },
                        new
                        {
                            Id = 8,
                            OperationClaimId = 1,
                            UserId = 5
                        },
                        new
                        {
                            Id = 9,
                            OperationClaimId = 2,
                            UserId = 5
                        },
                        new
                        {
                            Id = 10,
                            OperationClaimId = 1,
                            UserId = 6
                        },
                        new
                        {
                            Id = 11,
                            OperationClaimId = 2,
                            UserId = 6
                        },
                        new
                        {
                            Id = 12,
                            OperationClaimId = 1,
                            UserId = 7
                        },
                        new
                        {
                            Id = 13,
                            OperationClaimId = 2,
                            UserId = 7
                        },
                        new
                        {
                            Id = 14,
                            OperationClaimId = 1,
                            UserId = 8
                        },
                        new
                        {
                            Id = 15,
                            OperationClaimId = 2,
                            UserId = 8
                        },
                        new
                        {
                            Id = 16,
                            OperationClaimId = 1,
                            UserId = 9
                        },
                        new
                        {
                            Id = 17,
                            OperationClaimId = 1,
                            UserId = 10
                        },
                        new
                        {
                            Id = 18,
                            OperationClaimId = 1,
                            UserId = 11
                        },
                        new
                        {
                            Id = 19,
                            OperationClaimId = 1,
                            UserId = 12
                        },
                        new
                        {
                            Id = 20,
                            OperationClaimId = 1,
                            UserId = 13
                        },
                        new
                        {
                            Id = 21,
                            OperationClaimId = 1,
                            UserId = 14
                        },
                        new
                        {
                            Id = 22,
                            OperationClaimId = 2,
                            UserId = 14
                        },
                        new
                        {
                            Id = 23,
                            OperationClaimId = 1,
                            UserId = 15
                        },
                        new
                        {
                            Id = 24,
                            OperationClaimId = 2,
                            UserId = 15
                        },
                        new
                        {
                            Id = 25,
                            OperationClaimId = 1,
                            UserId = 16
                        },
                        new
                        {
                            Id = 26,
                            OperationClaimId = 2,
                            UserId = 16
                        });
                });

            modelBuilder.Entity("Domain.Entities.WorkingTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EndBreakTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("StartBreakTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("WorkingTimes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndBreakTime = new TimeSpan(0, 13, 0, 0, 0),
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            StartBreakTime = new TimeSpan(0, 12, 0, 0, 0),
                            StartTime = new TimeSpan(0, 8, 30, 0, 0)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.Property<int?>("BloodType")
                        .HasColumnType("int");

                    b.Property<string>("EmergencyContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FeedbackId")
                        .HasColumnType("int");

                    b.HasIndex("FeedbackId");

                    b.ToTable("Patients", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(2024, 7, 5, 14, 2, 41, 108, DateTimeKind.Local).AddTicks(5508),
                            CreatedDate = new DateTime(2024, 7, 5, 14, 2, 41, 108, DateTimeKind.Local).AddTicks(5522),
                            Email = "admin@hrs.com",
                            FirstName = "Test",
                            Gender = "U",
                            LastName = "Admin",
                            PasswordHash = new byte[] { 251, 22, 184, 209, 139, 32, 178, 188, 134, 0, 166, 14, 141, 54, 119, 9, 144, 115, 178, 24, 178, 24, 232, 203, 159, 106, 233, 108, 164, 96, 78, 129, 9, 11, 61, 156, 141, 211, 221, 182, 173, 77, 205, 224, 66, 20, 166, 47, 7, 143, 11, 140, 225, 106, 45, 78, 7, 142, 132, 151, 107, 160, 77, 16 },
                            PasswordSalt = new byte[] { 125, 28, 96, 183, 40, 2, 80, 240, 118, 227, 124, 233, 217, 95, 171, 247, 204, 190, 47, 252, 2, 78, 46, 74, 19, 31, 86, 102, 244, 19, 252, 251, 147, 35, 29, 149, 183, 60, 14, 16, 166, 21, 116, 199, 188, 222, 117, 222, 72, 209, 37, 227, 216, 93, 55, 49, 48, 164, 95, 108, 9, 65, 186, 6, 153, 213, 150, 33, 102, 10, 130, 156, 73, 159, 214, 223, 216, 0, 236, 111, 199, 118, 186, 230, 23, 163, 102, 13, 237, 173, 166, 115, 171, 169, 115, 30, 74, 192, 61, 251, 89, 230, 120, 13, 108, 62, 255, 183, 244, 154, 226, 75, 68, 182, 107, 125, 86, 244, 188, 157, 105, 65, 137, 29, 34, 207, 21, 147 },
                            Phone = "+905000000000"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(2024, 7, 5, 14, 2, 41, 108, DateTimeKind.Local).AddTicks(5530),
                            CreatedDate = new DateTime(2024, 7, 5, 14, 2, 41, 108, DateTimeKind.Local).AddTicks(5532),
                            Email = "doctor@hrs.com",
                            FirstName = "Test",
                            Gender = "U",
                            LastName = "Doctor",
                            PasswordHash = new byte[] { 251, 22, 184, 209, 139, 32, 178, 188, 134, 0, 166, 14, 141, 54, 119, 9, 144, 115, 178, 24, 178, 24, 232, 203, 159, 106, 233, 108, 164, 96, 78, 129, 9, 11, 61, 156, 141, 211, 221, 182, 173, 77, 205, 224, 66, 20, 166, 47, 7, 143, 11, 140, 225, 106, 45, 78, 7, 142, 132, 151, 107, 160, 77, 16 },
                            PasswordSalt = new byte[] { 125, 28, 96, 183, 40, 2, 80, 240, 118, 227, 124, 233, 217, 95, 171, 247, 204, 190, 47, 252, 2, 78, 46, 74, 19, 31, 86, 102, 244, 19, 252, 251, 147, 35, 29, 149, 183, 60, 14, 16, 166, 21, 116, 199, 188, 222, 117, 222, 72, 209, 37, 227, 216, 93, 55, 49, 48, 164, 95, 108, 9, 65, 186, 6, 153, 213, 150, 33, 102, 10, 130, 156, 73, 159, 214, 223, 216, 0, 236, 111, 199, 118, 186, 230, 23, 163, 102, 13, 237, 173, 166, 115, 171, 169, 115, 30, 74, 192, 61, 251, 89, 230, 120, 13, 108, 62, 255, 183, 244, 154, 226, 75, 68, 182, 107, 125, 86, 244, 188, 157, 105, 65, 137, 29, 34, 207, 21, 147 },
                            Phone = "+905000000001"
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(2024, 7, 5, 14, 2, 41, 108, DateTimeKind.Local).AddTicks(5539),
                            CreatedDate = new DateTime(2024, 7, 5, 14, 2, 41, 108, DateTimeKind.Local).AddTicks(5540),
                            Email = "patient@hrs.com",
                            FirstName = "Test",
                            Gender = "U",
                            LastName = "Patient",
                            PasswordHash = new byte[] { 251, 22, 184, 209, 139, 32, 178, 188, 134, 0, 166, 14, 141, 54, 119, 9, 144, 115, 178, 24, 178, 24, 232, 203, 159, 106, 233, 108, 164, 96, 78, 129, 9, 11, 61, 156, 141, 211, 221, 182, 173, 77, 205, 224, 66, 20, 166, 47, 7, 143, 11, 140, 225, 106, 45, 78, 7, 142, 132, 151, 107, 160, 77, 16 },
                            PasswordSalt = new byte[] { 125, 28, 96, 183, 40, 2, 80, 240, 118, 227, 124, 233, 217, 95, 171, 247, 204, 190, 47, 252, 2, 78, 46, 74, 19, 31, 86, 102, 244, 19, 252, 251, 147, 35, 29, 149, 183, 60, 14, 16, 166, 21, 116, 199, 188, 222, 117, 222, 72, 209, 37, 227, 216, 93, 55, 49, 48, 164, 95, 108, 9, 65, 186, 6, 153, 213, 150, 33, 102, 10, 130, 156, 73, 159, 214, 223, 216, 0, 236, 111, 199, 118, 186, 230, 23, 163, 102, 13, 237, 173, 166, 115, 171, 169, 115, 30, 74, 192, 61, 251, 89, 230, 120, 13, 108, 62, 255, 183, 244, 154, 226, 75, 68, 182, 107, 125, 86, 244, 188, 157, 105, 65, 137, 29, 34, 207, 21, 147 },
                            Phone = "+905000000002"
                        },
                        new
                        {
                            Id = 4,
                            BirthDate = new DateTime(1975, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 7, 5, 14, 2, 41, 108, DateTimeKind.Local).AddTicks(5547),
                            Email = "ahmet.yildiz@hrs.com",
                            FirstName = "Ahmet",
                            Gender = "M",
                            LastName = "Yıldız",
                            PasswordHash = new byte[] { 251, 22, 184, 209, 139, 32, 178, 188, 134, 0, 166, 14, 141, 54, 119, 9, 144, 115, 178, 24, 178, 24, 232, 203, 159, 106, 233, 108, 164, 96, 78, 129, 9, 11, 61, 156, 141, 211, 221, 182, 173, 77, 205, 224, 66, 20, 166, 47, 7, 143, 11, 140, 225, 106, 45, 78, 7, 142, 132, 151, 107, 160, 77, 16 },
                            PasswordSalt = new byte[] { 125, 28, 96, 183, 40, 2, 80, 240, 118, 227, 124, 233, 217, 95, 171, 247, 204, 190, 47, 252, 2, 78, 46, 74, 19, 31, 86, 102, 244, 19, 252, 251, 147, 35, 29, 149, 183, 60, 14, 16, 166, 21, 116, 199, 188, 222, 117, 222, 72, 209, 37, 227, 216, 93, 55, 49, 48, 164, 95, 108, 9, 65, 186, 6, 153, 213, 150, 33, 102, 10, 130, 156, 73, 159, 214, 223, 216, 0, 236, 111, 199, 118, 186, 230, 23, 163, 102, 13, 237, 173, 166, 115, 171, 169, 115, 30, 74, 192, 61, 251, 89, 230, 120, 13, 108, 62, 255, 183, 244, 154, 226, 75, 68, 182, 107, 125, 86, 244, 188, 157, 105, 65, 137, 29, 34, 207, 21, 147 },
                            Phone = "+905301234567"
                        },
                        new
                        {
                            Id = 5,
                            BirthDate = new DateTime(1980, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 7, 5, 14, 2, 41, 108, DateTimeKind.Local).AddTicks(5551),
                            Email = "emine.sahin@hrs.com",
                            FirstName = "Emine",
                            Gender = "F",
                            LastName = "Şahin",
                            PasswordHash = new byte[] { 251, 22, 184, 209, 139, 32, 178, 188, 134, 0, 166, 14, 141, 54, 119, 9, 144, 115, 178, 24, 178, 24, 232, 203, 159, 106, 233, 108, 164, 96, 78, 129, 9, 11, 61, 156, 141, 211, 221, 182, 173, 77, 205, 224, 66, 20, 166, 47, 7, 143, 11, 140, 225, 106, 45, 78, 7, 142, 132, 151, 107, 160, 77, 16 },
                            PasswordSalt = new byte[] { 125, 28, 96, 183, 40, 2, 80, 240, 118, 227, 124, 233, 217, 95, 171, 247, 204, 190, 47, 252, 2, 78, 46, 74, 19, 31, 86, 102, 244, 19, 252, 251, 147, 35, 29, 149, 183, 60, 14, 16, 166, 21, 116, 199, 188, 222, 117, 222, 72, 209, 37, 227, 216, 93, 55, 49, 48, 164, 95, 108, 9, 65, 186, 6, 153, 213, 150, 33, 102, 10, 130, 156, 73, 159, 214, 223, 216, 0, 236, 111, 199, 118, 186, 230, 23, 163, 102, 13, 237, 173, 166, 115, 171, 169, 115, 30, 74, 192, 61, 251, 89, 230, 120, 13, 108, 62, 255, 183, 244, 154, 226, 75, 68, 182, 107, 125, 86, 244, 188, 157, 105, 65, 137, 29, 34, 207, 21, 147 },
                            Phone = "+905412345678"
                        },
                        new
                        {
                            Id = 6,
                            BirthDate = new DateTime(1972, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 7, 5, 14, 2, 41, 108, DateTimeKind.Local).AddTicks(5554),
                            Email = "mustafa.aydin@hrs.com",
                            FirstName = "Mustafa",
                            Gender = "M",
                            LastName = "Aydın",
                            PasswordHash = new byte[] { 251, 22, 184, 209, 139, 32, 178, 188, 134, 0, 166, 14, 141, 54, 119, 9, 144, 115, 178, 24, 178, 24, 232, 203, 159, 106, 233, 108, 164, 96, 78, 129, 9, 11, 61, 156, 141, 211, 221, 182, 173, 77, 205, 224, 66, 20, 166, 47, 7, 143, 11, 140, 225, 106, 45, 78, 7, 142, 132, 151, 107, 160, 77, 16 },
                            PasswordSalt = new byte[] { 125, 28, 96, 183, 40, 2, 80, 240, 118, 227, 124, 233, 217, 95, 171, 247, 204, 190, 47, 252, 2, 78, 46, 74, 19, 31, 86, 102, 244, 19, 252, 251, 147, 35, 29, 149, 183, 60, 14, 16, 166, 21, 116, 199, 188, 222, 117, 222, 72, 209, 37, 227, 216, 93, 55, 49, 48, 164, 95, 108, 9, 65, 186, 6, 153, 213, 150, 33, 102, 10, 130, 156, 73, 159, 214, 223, 216, 0, 236, 111, 199, 118, 186, 230, 23, 163, 102, 13, 237, 173, 166, 115, 171, 169, 115, 30, 74, 192, 61, 251, 89, 230, 120, 13, 108, 62, 255, 183, 244, 154, 226, 75, 68, 182, 107, 125, 86, 244, 188, 157, 105, 65, 137, 29, 34, 207, 21, 147 },
                            Phone = "+905523456789"
                        },
                        new
                        {
                            Id = 7,
                            BirthDate = new DateTime(1983, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 7, 5, 14, 2, 41, 108, DateTimeKind.Local).AddTicks(5557),
                            Email = "hacer.korkmaz@hrs.com",
                            FirstName = "Hacer",
                            Gender = "F",
                            LastName = "Korkmaz",
                            PasswordHash = new byte[] { 251, 22, 184, 209, 139, 32, 178, 188, 134, 0, 166, 14, 141, 54, 119, 9, 144, 115, 178, 24, 178, 24, 232, 203, 159, 106, 233, 108, 164, 96, 78, 129, 9, 11, 61, 156, 141, 211, 221, 182, 173, 77, 205, 224, 66, 20, 166, 47, 7, 143, 11, 140, 225, 106, 45, 78, 7, 142, 132, 151, 107, 160, 77, 16 },
                            PasswordSalt = new byte[] { 125, 28, 96, 183, 40, 2, 80, 240, 118, 227, 124, 233, 217, 95, 171, 247, 204, 190, 47, 252, 2, 78, 46, 74, 19, 31, 86, 102, 244, 19, 252, 251, 147, 35, 29, 149, 183, 60, 14, 16, 166, 21, 116, 199, 188, 222, 117, 222, 72, 209, 37, 227, 216, 93, 55, 49, 48, 164, 95, 108, 9, 65, 186, 6, 153, 213, 150, 33, 102, 10, 130, 156, 73, 159, 214, 223, 216, 0, 236, 111, 199, 118, 186, 230, 23, 163, 102, 13, 237, 173, 166, 115, 171, 169, 115, 30, 74, 192, 61, 251, 89, 230, 120, 13, 108, 62, 255, 183, 244, 154, 226, 75, 68, 182, 107, 125, 86, 244, 188, 157, 105, 65, 137, 29, 34, 207, 21, 147 },
                            Phone = "+905634567890"
                        },
                        new
                        {
                            Id = 8,
                            BirthDate = new DateTime(1978, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 7, 5, 14, 2, 41, 108, DateTimeKind.Local).AddTicks(5560),
                            Email = "ibrahim.arslan@hrs.com",
                            FirstName = "İbrahim",
                            Gender = "M",
                            LastName = "Arslan",
                            PasswordHash = new byte[] { 251, 22, 184, 209, 139, 32, 178, 188, 134, 0, 166, 14, 141, 54, 119, 9, 144, 115, 178, 24, 178, 24, 232, 203, 159, 106, 233, 108, 164, 96, 78, 129, 9, 11, 61, 156, 141, 211, 221, 182, 173, 77, 205, 224, 66, 20, 166, 47, 7, 143, 11, 140, 225, 106, 45, 78, 7, 142, 132, 151, 107, 160, 77, 16 },
                            PasswordSalt = new byte[] { 125, 28, 96, 183, 40, 2, 80, 240, 118, 227, 124, 233, 217, 95, 171, 247, 204, 190, 47, 252, 2, 78, 46, 74, 19, 31, 86, 102, 244, 19, 252, 251, 147, 35, 29, 149, 183, 60, 14, 16, 166, 21, 116, 199, 188, 222, 117, 222, 72, 209, 37, 227, 216, 93, 55, 49, 48, 164, 95, 108, 9, 65, 186, 6, 153, 213, 150, 33, 102, 10, 130, 156, 73, 159, 214, 223, 216, 0, 236, 111, 199, 118, 186, 230, 23, 163, 102, 13, 237, 173, 166, 115, 171, 169, 115, 30, 74, 192, 61, 251, 89, 230, 120, 13, 108, 62, 255, 183, 244, 154, 226, 75, 68, 182, 107, 125, 86, 244, 188, 157, 105, 65, 137, 29, 34, 207, 21, 147 },
                            Phone = "+905745678901"
                        },
                        new
                        {
                            Id = 14,
                            BirthDate = new DateTime(1982, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 7, 5, 14, 2, 41, 108, DateTimeKind.Local).AddTicks(5563),
                            Email = "seda.kara@hrs.com",
                            FirstName = "Seda",
                            Gender = "F",
                            LastName = "Kara",
                            PasswordHash = new byte[] { 251, 22, 184, 209, 139, 32, 178, 188, 134, 0, 166, 14, 141, 54, 119, 9, 144, 115, 178, 24, 178, 24, 232, 203, 159, 106, 233, 108, 164, 96, 78, 129, 9, 11, 61, 156, 141, 211, 221, 182, 173, 77, 205, 224, 66, 20, 166, 47, 7, 143, 11, 140, 225, 106, 45, 78, 7, 142, 132, 151, 107, 160, 77, 16 },
                            PasswordSalt = new byte[] { 125, 28, 96, 183, 40, 2, 80, 240, 118, 227, 124, 233, 217, 95, 171, 247, 204, 190, 47, 252, 2, 78, 46, 74, 19, 31, 86, 102, 244, 19, 252, 251, 147, 35, 29, 149, 183, 60, 14, 16, 166, 21, 116, 199, 188, 222, 117, 222, 72, 209, 37, 227, 216, 93, 55, 49, 48, 164, 95, 108, 9, 65, 186, 6, 153, 213, 150, 33, 102, 10, 130, 156, 73, 159, 214, 223, 216, 0, 236, 111, 199, 118, 186, 230, 23, 163, 102, 13, 237, 173, 166, 115, 171, 169, 115, 30, 74, 192, 61, 251, 89, 230, 120, 13, 108, 62, 255, 183, 244, 154, 226, 75, 68, 182, 107, 125, 86, 244, 188, 157, 105, 65, 137, 29, 34, 207, 21, 147 },
                            Phone = "+905356789012"
                        },
                        new
                        {
                            Id = 15,
                            BirthDate = new DateTime(1979, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 7, 5, 14, 2, 41, 108, DateTimeKind.Local).AddTicks(5566),
                            Email = "okan.yilmaz@hrs.com",
                            FirstName = "Okan",
                            Gender = "M",
                            LastName = "Yılmaz",
                            PasswordHash = new byte[] { 251, 22, 184, 209, 139, 32, 178, 188, 134, 0, 166, 14, 141, 54, 119, 9, 144, 115, 178, 24, 178, 24, 232, 203, 159, 106, 233, 108, 164, 96, 78, 129, 9, 11, 61, 156, 141, 211, 221, 182, 173, 77, 205, 224, 66, 20, 166, 47, 7, 143, 11, 140, 225, 106, 45, 78, 7, 142, 132, 151, 107, 160, 77, 16 },
                            PasswordSalt = new byte[] { 125, 28, 96, 183, 40, 2, 80, 240, 118, 227, 124, 233, 217, 95, 171, 247, 204, 190, 47, 252, 2, 78, 46, 74, 19, 31, 86, 102, 244, 19, 252, 251, 147, 35, 29, 149, 183, 60, 14, 16, 166, 21, 116, 199, 188, 222, 117, 222, 72, 209, 37, 227, 216, 93, 55, 49, 48, 164, 95, 108, 9, 65, 186, 6, 153, 213, 150, 33, 102, 10, 130, 156, 73, 159, 214, 223, 216, 0, 236, 111, 199, 118, 186, 230, 23, 163, 102, 13, 237, 173, 166, 115, 171, 169, 115, 30, 74, 192, 61, 251, 89, 230, 120, 13, 108, 62, 255, 183, 244, 154, 226, 75, 68, 182, 107, 125, 86, 244, 188, 157, 105, 65, 137, 29, 34, 207, 21, 147 },
                            Phone = "+905467890123"
                        },
                        new
                        {
                            Id = 16,
                            BirthDate = new DateTime(1985, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 7, 5, 14, 2, 41, 108, DateTimeKind.Local).AddTicks(5569),
                            Email = "sevgi.ozturk@hrs.com",
                            FirstName = "Sevgi",
                            Gender = "F",
                            LastName = "Öztürk",
                            PasswordHash = new byte[] { 251, 22, 184, 209, 139, 32, 178, 188, 134, 0, 166, 14, 141, 54, 119, 9, 144, 115, 178, 24, 178, 24, 232, 203, 159, 106, 233, 108, 164, 96, 78, 129, 9, 11, 61, 156, 141, 211, 221, 182, 173, 77, 205, 224, 66, 20, 166, 47, 7, 143, 11, 140, 225, 106, 45, 78, 7, 142, 132, 151, 107, 160, 77, 16 },
                            PasswordSalt = new byte[] { 125, 28, 96, 183, 40, 2, 80, 240, 118, 227, 124, 233, 217, 95, 171, 247, 204, 190, 47, 252, 2, 78, 46, 74, 19, 31, 86, 102, 244, 19, 252, 251, 147, 35, 29, 149, 183, 60, 14, 16, 166, 21, 116, 199, 188, 222, 117, 222, 72, 209, 37, 227, 216, 93, 55, 49, 48, 164, 95, 108, 9, 65, 186, 6, 153, 213, 150, 33, 102, 10, 130, 156, 73, 159, 214, 223, 216, 0, 236, 111, 199, 118, 186, 230, 23, 163, 102, 13, 237, 173, 166, 115, 171, 169, 115, 30, 74, 192, 61, 251, 89, 230, 120, 13, 108, 62, 255, 183, 244, 154, 226, 75, 68, 182, 107, 125, 86, 244, 188, 157, 105, 65, 137, 29, 34, 207, 21, 147 },
                            Phone = "+905578901234"
                        },
                        new
                        {
                            Id = 9,
                            BirthDate = new DateTime(1985, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 7, 5, 14, 2, 41, 108, DateTimeKind.Local).AddTicks(5588),
                            Email = "ayse.yilmaz@email.com",
                            FirstName = "Ayşe",
                            Gender = "F",
                            LastName = "Yılmaz",
                            PasswordHash = new byte[] { 251, 22, 184, 209, 139, 32, 178, 188, 134, 0, 166, 14, 141, 54, 119, 9, 144, 115, 178, 24, 178, 24, 232, 203, 159, 106, 233, 108, 164, 96, 78, 129, 9, 11, 61, 156, 141, 211, 221, 182, 173, 77, 205, 224, 66, 20, 166, 47, 7, 143, 11, 140, 225, 106, 45, 78, 7, 142, 132, 151, 107, 160, 77, 16 },
                            PasswordSalt = new byte[] { 125, 28, 96, 183, 40, 2, 80, 240, 118, 227, 124, 233, 217, 95, 171, 247, 204, 190, 47, 252, 2, 78, 46, 74, 19, 31, 86, 102, 244, 19, 252, 251, 147, 35, 29, 149, 183, 60, 14, 16, 166, 21, 116, 199, 188, 222, 117, 222, 72, 209, 37, 227, 216, 93, 55, 49, 48, 164, 95, 108, 9, 65, 186, 6, 153, 213, 150, 33, 102, 10, 130, 156, 73, 159, 214, 223, 216, 0, 236, 111, 199, 118, 186, 230, 23, 163, 102, 13, 237, 173, 166, 115, 171, 169, 115, 30, 74, 192, 61, 251, 89, 230, 120, 13, 108, 62, 255, 183, 244, 154, 226, 75, 68, 182, 107, 125, 86, 244, 188, 157, 105, 65, 137, 29, 34, 207, 21, 147 },
                            Phone = "+905856789012"
                        },
                        new
                        {
                            Id = 10,
                            BirthDate = new DateTime(1990, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 7, 5, 14, 2, 41, 108, DateTimeKind.Local).AddTicks(5591),
                            Email = "mehmet.kaya@email.com",
                            FirstName = "Mehmet",
                            Gender = "M",
                            LastName = "Kaya",
                            PasswordHash = new byte[] { 251, 22, 184, 209, 139, 32, 178, 188, 134, 0, 166, 14, 141, 54, 119, 9, 144, 115, 178, 24, 178, 24, 232, 203, 159, 106, 233, 108, 164, 96, 78, 129, 9, 11, 61, 156, 141, 211, 221, 182, 173, 77, 205, 224, 66, 20, 166, 47, 7, 143, 11, 140, 225, 106, 45, 78, 7, 142, 132, 151, 107, 160, 77, 16 },
                            PasswordSalt = new byte[] { 125, 28, 96, 183, 40, 2, 80, 240, 118, 227, 124, 233, 217, 95, 171, 247, 204, 190, 47, 252, 2, 78, 46, 74, 19, 31, 86, 102, 244, 19, 252, 251, 147, 35, 29, 149, 183, 60, 14, 16, 166, 21, 116, 199, 188, 222, 117, 222, 72, 209, 37, 227, 216, 93, 55, 49, 48, 164, 95, 108, 9, 65, 186, 6, 153, 213, 150, 33, 102, 10, 130, 156, 73, 159, 214, 223, 216, 0, 236, 111, 199, 118, 186, 230, 23, 163, 102, 13, 237, 173, 166, 115, 171, 169, 115, 30, 74, 192, 61, 251, 89, 230, 120, 13, 108, 62, 255, 183, 244, 154, 226, 75, 68, 182, 107, 125, 86, 244, 188, 157, 105, 65, 137, 29, 34, 207, 21, 147 },
                            Phone = "+905967890123"
                        },
                        new
                        {
                            Id = 11,
                            BirthDate = new DateTime(1978, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 7, 5, 14, 2, 41, 108, DateTimeKind.Local).AddTicks(5594),
                            Email = "fatma.demir@email.com",
                            FirstName = "Fatma",
                            Gender = "F",
                            LastName = "Demir",
                            PasswordHash = new byte[] { 251, 22, 184, 209, 139, 32, 178, 188, 134, 0, 166, 14, 141, 54, 119, 9, 144, 115, 178, 24, 178, 24, 232, 203, 159, 106, 233, 108, 164, 96, 78, 129, 9, 11, 61, 156, 141, 211, 221, 182, 173, 77, 205, 224, 66, 20, 166, 47, 7, 143, 11, 140, 225, 106, 45, 78, 7, 142, 132, 151, 107, 160, 77, 16 },
                            PasswordSalt = new byte[] { 125, 28, 96, 183, 40, 2, 80, 240, 118, 227, 124, 233, 217, 95, 171, 247, 204, 190, 47, 252, 2, 78, 46, 74, 19, 31, 86, 102, 244, 19, 252, 251, 147, 35, 29, 149, 183, 60, 14, 16, 166, 21, 116, 199, 188, 222, 117, 222, 72, 209, 37, 227, 216, 93, 55, 49, 48, 164, 95, 108, 9, 65, 186, 6, 153, 213, 150, 33, 102, 10, 130, 156, 73, 159, 214, 223, 216, 0, 236, 111, 199, 118, 186, 230, 23, 163, 102, 13, 237, 173, 166, 115, 171, 169, 115, 30, 74, 192, 61, 251, 89, 230, 120, 13, 108, 62, 255, 183, 244, 154, 226, 75, 68, 182, 107, 125, 86, 244, 188, 157, 105, 65, 137, 29, 34, 207, 21, 147 },
                            Phone = "+905078901234"
                        },
                        new
                        {
                            Id = 12,
                            BirthDate = new DateTime(1995, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 7, 5, 14, 2, 41, 108, DateTimeKind.Local).AddTicks(5597),
                            Email = "ali.ozturk@email.com",
                            FirstName = "Ali",
                            Gender = "M",
                            LastName = "Öztürk",
                            PasswordHash = new byte[] { 251, 22, 184, 209, 139, 32, 178, 188, 134, 0, 166, 14, 141, 54, 119, 9, 144, 115, 178, 24, 178, 24, 232, 203, 159, 106, 233, 108, 164, 96, 78, 129, 9, 11, 61, 156, 141, 211, 221, 182, 173, 77, 205, 224, 66, 20, 166, 47, 7, 143, 11, 140, 225, 106, 45, 78, 7, 142, 132, 151, 107, 160, 77, 16 },
                            PasswordSalt = new byte[] { 125, 28, 96, 183, 40, 2, 80, 240, 118, 227, 124, 233, 217, 95, 171, 247, 204, 190, 47, 252, 2, 78, 46, 74, 19, 31, 86, 102, 244, 19, 252, 251, 147, 35, 29, 149, 183, 60, 14, 16, 166, 21, 116, 199, 188, 222, 117, 222, 72, 209, 37, 227, 216, 93, 55, 49, 48, 164, 95, 108, 9, 65, 186, 6, 153, 213, 150, 33, 102, 10, 130, 156, 73, 159, 214, 223, 216, 0, 236, 111, 199, 118, 186, 230, 23, 163, 102, 13, 237, 173, 166, 115, 171, 169, 115, 30, 74, 192, 61, 251, 89, 230, 120, 13, 108, 62, 255, 183, 244, 154, 226, 75, 68, 182, 107, 125, 86, 244, 188, 157, 105, 65, 137, 29, 34, 207, 21, 147 },
                            Phone = "+905189012345"
                        },
                        new
                        {
                            Id = 13,
                            BirthDate = new DateTime(1988, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 7, 5, 14, 2, 41, 108, DateTimeKind.Local).AddTicks(5600),
                            Email = "zeynep.celik@email.com",
                            FirstName = "Zeynep",
                            Gender = "F",
                            LastName = "Çelik",
                            PasswordHash = new byte[] { 251, 22, 184, 209, 139, 32, 178, 188, 134, 0, 166, 14, 141, 54, 119, 9, 144, 115, 178, 24, 178, 24, 232, 203, 159, 106, 233, 108, 164, 96, 78, 129, 9, 11, 61, 156, 141, 211, 221, 182, 173, 77, 205, 224, 66, 20, 166, 47, 7, 143, 11, 140, 225, 106, 45, 78, 7, 142, 132, 151, 107, 160, 77, 16 },
                            PasswordSalt = new byte[] { 125, 28, 96, 183, 40, 2, 80, 240, 118, 227, 124, 233, 217, 95, 171, 247, 204, 190, 47, 252, 2, 78, 46, 74, 19, 31, 86, 102, 244, 19, 252, 251, 147, 35, 29, 149, 183, 60, 14, 16, 166, 21, 116, 199, 188, 222, 117, 222, 72, 209, 37, 227, 216, 93, 55, 49, 48, 164, 95, 108, 9, 65, 186, 6, 153, 213, 150, 33, 102, 10, 130, 156, 73, 159, 214, 223, 216, 0, 236, 111, 199, 118, 186, 230, 23, 163, 102, 13, 237, 173, 166, 115, 171, 169, 115, 30, 74, 192, 61, 251, 89, 230, 120, 13, 108, 62, 255, 183, 244, 154, 226, 75, 68, 182, 107, 125, 86, 244, 188, 157, 105, 65, 137, 29, 34, 207, 21, 147 },
                            Phone = "+905290123456"
                        });
                });

            modelBuilder.Entity("AllergyPatient", b =>
                {
                    b.HasOne("Domain.Entities.Allergy", null)
                        .WithMany()
                        .HasForeignKey("AllergiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Admin", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Appointment", b =>
                {
                    b.HasOne("Domain.Entities.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.HasOne("Domain.Entities.Clinic", "Clinic")
                        .WithMany("Doctors")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.OfficeLocation", "OfficeLocation")
                        .WithOne("Doctor")
                        .HasForeignKey("Domain.Entities.Doctor", "OfficeLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Title", "Title")
                        .WithMany("Doctors")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("OfficeLocation");

                    b.Navigation("Title");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.DoctorNoWorkHour", b =>
                {
                    b.HasOne("Domain.Entities.Doctor", "Doctor")
                        .WithMany("DoctorNoWorkHours")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.NoWorkHour", "NoWorkHour")
                        .WithMany("DoctorNoWorkHours")
                        .HasForeignKey("NoWorkHourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("NoWorkHour");
                });

            modelBuilder.Entity("Domain.Entities.OfficeLocation", b =>
                {
                    b.HasOne("Domain.Entities.Block", "Block")
                        .WithMany("OfficeLocations")
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Floor", "Floor")
                        .WithMany("OfficeLocations")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Room", "Room")
                        .WithMany("OfficeLocations")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Floor");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Domain.Entities.OldAppointmentDuration", b =>
                {
                    b.HasOne("Domain.Entities.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("Domain.Entities.Report", b =>
                {
                    b.HasOne("Domain.Entities.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Domain.Entities.UserOperationClaim", b =>
                {
                    b.HasOne("Domain.Entities.OperationClaim", "OperationClaim")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.HasOne("Domain.Entities.Feedback", null)
                        .WithMany("Patients")
                        .HasForeignKey("FeedbackId");

                    b.HasOne("Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Patient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Block", b =>
                {
                    b.Navigation("OfficeLocations");
                });

            modelBuilder.Entity("Domain.Entities.Clinic", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("DoctorNoWorkHours");
                });

            modelBuilder.Entity("Domain.Entities.Feedback", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("Domain.Entities.Floor", b =>
                {
                    b.Navigation("OfficeLocations");
                });

            modelBuilder.Entity("Domain.Entities.NoWorkHour", b =>
                {
                    b.Navigation("DoctorNoWorkHours");
                });

            modelBuilder.Entity("Domain.Entities.OfficeLocation", b =>
                {
                    b.Navigation("Doctor")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.OperationClaim", b =>
                {
                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.Room", b =>
                {
                    b.Navigation("OfficeLocations");
                });

            modelBuilder.Entity("Domain.Entities.Title", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
